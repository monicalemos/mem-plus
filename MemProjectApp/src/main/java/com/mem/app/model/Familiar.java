package com.mem.app.model;

import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Familiar generated by hbm2java
 */
@Entity
@Table(name = "familiar", catalog = "memdb")
public class Familiar implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int idFamiliar;
	private Morada moradaByIdLocalNascimento;
	private Morada moradaByIdMorada;
	private Utilizador utilizador;
	private String nomeCompleto;
	private String nomeProprio;
	private String apelido;
	private Date dataNascimento;
	private String genero;
	private String estadoCivil;
	private String profissao;
	private Integer telefone;
	private Boolean ecuidador;
	private Date dataObito;
	private List<Evento> eventos = new ArrayList<Evento>(0);
	private List<Relacaopacientefamiliar> relacaopacientefamiliars = new ArrayList<Relacaopacientefamiliar>(0);
	private List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar1 = new ArrayList<Relacaofamiliarfamiliar>(0);
	private List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar = new ArrayList<Relacaofamiliarfamiliar>(0);

	public Familiar() {
	}

	public Familiar(int idFamiliar, Morada moradaByIdLocalNascimento, Morada moradaByIdMorada) {
		this.idFamiliar = idFamiliar;
		this.moradaByIdLocalNascimento = moradaByIdLocalNascimento;
		this.moradaByIdMorada = moradaByIdMorada;
	}

	public Familiar(int idFamiliar, Morada moradaByIdLocalNascimento, Morada moradaByIdMorada, Utilizador utilizador,
			String nomeCompleto, String nomeProprio, String apelido, Date dataNascimento, String genero,
			String estadoCivil, String profissao, Integer telefone, Boolean ecuidador, Date dataObito, List<Evento> eventos,
			List<Relacaopacientefamiliar> relacaopacientefamiliars, List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar1,
			List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar) {
		this.idFamiliar = idFamiliar;
		this.moradaByIdLocalNascimento = moradaByIdLocalNascimento;
		this.moradaByIdMorada = moradaByIdMorada;
		this.utilizador = utilizador;
		this.nomeCompleto = nomeCompleto;
		this.nomeProprio = nomeProprio;
		this.apelido = apelido;
		this.dataNascimento = dataNascimento;
		this.genero = genero;
		this.estadoCivil = estadoCivil;
		this.profissao = profissao;
		this.telefone = telefone;
		this.ecuidador = ecuidador;
		this.dataObito = dataObito;
		this.eventos = eventos;
		this.relacaopacientefamiliars = relacaopacientefamiliars;
		this.relacaofamiliarfamiliarsForIdFamiliar1 = relacaofamiliarfamiliarsForIdFamiliar1;
		this.relacaofamiliarfamiliarsForIdFamiliar = relacaofamiliarfamiliarsForIdFamiliar;
	}

	@Id

	@Column(name = "idFamiliar", unique = true, nullable = false)
	public int getIdFamiliar() {
		return this.idFamiliar;
	}

	public void setIdFamiliar(int idFamiliar) {
		this.idFamiliar = idFamiliar;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idLocalNascimento", nullable = false)
	public Morada getMoradaByIdLocalNascimento() {
		return this.moradaByIdLocalNascimento;
	}

	public void setMoradaByIdLocalNascimento(Morada moradaByIdLocalNascimento) {
		this.moradaByIdLocalNascimento = moradaByIdLocalNascimento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idMorada", nullable = false)
	public Morada getMoradaByIdMorada() {
		return this.moradaByIdMorada;
	}

	public void setMoradaByIdMorada(Morada moradaByIdMorada) {
		this.moradaByIdMorada = moradaByIdMorada;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idUtilizador")
	public Utilizador getUtilizador() {
		return this.utilizador;
	}

	public void setUtilizador(Utilizador utilizador) {
		this.utilizador = utilizador;
	}

	@Column(name = "nomeCompleto", length = 45)
	public String getNomeCompleto() {
		return this.nomeCompleto;
	}

	public void setNomeCompleto(String nomeCompleto) {
		this.nomeCompleto = nomeCompleto;
	}

	@Column(name = "nomeProprio", length = 45)
	public String getNomeProprio() {
		return this.nomeProprio;
	}

	public void setNomeProprio(String nomeProprio) {
		this.nomeProprio = nomeProprio;
	}

	@Column(name = "apelido", length = 45)
	public String getApelido() {
		return this.apelido;
	}

	public void setApelido(String apelido) {
		this.apelido = apelido;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dataNascimento", length = 10)
	public Date getDataNascimento() {
		return this.dataNascimento;
	}

	public void setDataNascimento(Date dataNascimento) {
		this.dataNascimento = dataNascimento;
	}

	@Column(name = "genero", length = 45)
	public String getGenero() {
		return this.genero;
	}

	public void setGenero(String genero) {
		this.genero = genero;
	}

	@Column(name = "estado_civil", length = 45)
	public String getEstadoCivil() {
		return this.estadoCivil;
	}

	public void setEstadoCivil(String estadoCivil) {
		this.estadoCivil = estadoCivil;
	}

	@Column(name = "profissao", length = 45)
	public String getProfissao() {
		return this.profissao;
	}

	public void setProfissao(String profissao) {
		this.profissao = profissao;
	}

	@Column(name = "telefone")
	public Integer getTelefone() {
		return this.telefone;
	}

	public void setTelefone(Integer telefone) {
		this.telefone = telefone;
	}

	@Column(name = "eCuidador")
	public Boolean getEcuidador() {
		return this.ecuidador;
	}

	public void setEcuidador(Boolean ecuidador) {
		this.ecuidador = ecuidador;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dataObito", length = 10)
	public Date getDataObito() {
		return this.dataObito;
	}

	public void setDataObito(Date dataObito) {
		this.dataObito = dataObito;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "familiar")
	public List<Evento> getEventos() {
		return this.eventos;
	}

	public void setEventos(List<Evento> eventos) {
		this.eventos = eventos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "familiar")
	public List<Relacaopacientefamiliar> getRelacaopacientefamiliars() {
		return this.relacaopacientefamiliars;
	}

	public void setRelacaopacientefamiliars(List<Relacaopacientefamiliar> relacaopacientefamiliars) {
		this.relacaopacientefamiliars = relacaopacientefamiliars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "familiarByIdFamiliar1")
	public List<Relacaofamiliarfamiliar> getRelacaofamiliarfamiliarsForIdFamiliar1() {
		return this.relacaofamiliarfamiliarsForIdFamiliar1;
	}

	public void setRelacaofamiliarfamiliarsForIdFamiliar1(List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar1) {
		this.relacaofamiliarfamiliarsForIdFamiliar1 = relacaofamiliarfamiliarsForIdFamiliar1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "familiarByIdFamiliar")
	public List<Relacaofamiliarfamiliar> getRelacaofamiliarfamiliarsForIdFamiliar() {
		return this.relacaofamiliarfamiliarsForIdFamiliar;
	}

	public void setRelacaofamiliarfamiliarsForIdFamiliar(List<Relacaofamiliarfamiliar> relacaofamiliarfamiliarsForIdFamiliar) {
		this.relacaofamiliarfamiliarsForIdFamiliar = relacaofamiliarfamiliarsForIdFamiliar;
	}

}
